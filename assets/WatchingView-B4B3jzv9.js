import{$ as U}from"./bundler-CViGtuft.js";import{getApps as b,initializeApp as C,getApp as S}from"https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";import{getFirestore as $,doc as B,getDoc as R,updateDoc as M,collection as N,query as V,where as q,getDocs as z}from"https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";import{_ as F,s as K,r as l,o as j,z as L,c as u,a as i,t as x,A as D,f as d}from"./index-C0g7oNsM.js";const O={id:"watch-root"},T={key:0,class:"not-found"},W={key:1,class:"loading"},E={key:2,class:"listen-section"},G={__name:"WatchingView",setup(H){const k={apiKey:"AIzaSyAQpMoxAKJrkave5D9e8CqKeLffCCUeGAw",authDomain:"vexa-d596e.firebaseapp.com",projectId:"vexa-d596e",storageBucket:"vexa-d596e.appspot.com",messagingSenderId:"79833394084",appId:"1:79833394084:web:1e5f41859b4125ef342f31"},I=b().length===0?C(k):S(),g=$(I),c=K().params.owner,a=l(!0),n=l(!1),p=l(null),m=l(null);function A(o){const r=`; ${document.cookie}`.split(`; ${o}=`);return r.length===2?decodeURIComponent(r.pop().split(";").shift()):null}async function P(o){const e=N(g,"vexaUsers"),r=V(e,q("username","==",o)),s=await z(r);return s.empty?null:{id:s.docs[0].id,...s.docs[0].data()}}return j(async()=>{const o=A("vexaUser");if(!o){console.error("No logged-in username in cookies"),a.value=!1,n.value=!1;return}const e=await P(o);if(!e||!e.PeerID){console.error("Viewer not found or missing PeerID for",o),a.value=!1,n.value=!1;return}const r=e.PeerID;let s;try{s=await navigator.mediaDevices.getUserMedia({audio:!0})}catch(t){console.warn("No mic access, using empty stream",t),s=new MediaStream}const w=B(g,"vexaRooms",c),y=await R(w);if(!y.exists()){n.value=!1,a.value=!1;return}p.value=y.data(),n.value=!0,a.value=!1;const h=p.value["Participants-Usernames"]||[];if(!h.includes(o))try{await M(w,{"Participants-Usernames":[...h,o]})}catch(t){console.error("Failed to update participants:",t)}const f=new U(r);f.on("open",()=>{const t=p.value["Room-Owner-PeerID"];if(!t){console.error("Host PeerID missing for",c);return}const _=f.call(t,s);_.on("stream",async v=>{await L(),m.value&&(m.value.srcObject=v)}),_.on("error",v=>console.error("Call error:",v))}),f.on("error",t=>console.error("Peer error:",t))}),(o,e)=>(d(),u("div",O,[!n.value&&!a.value?(d(),u("div",T,[e[0]||(e[0]=i("h2",null,"Stream Not Found",-1)),i("p",null,'The host "'+x(D(c))+'" is not streaming right now or the room does not exist.',1)])):a.value?(d(),u("div",W,e[1]||(e[1]=[i("p",null,"Checking stream availabilityâ€¦",-1)]))):(d(),u("div",E,[i("h2",null,"Listening to "+x(D(c))+"'s Stream",1),i("audio",{ref_key:"remoteAudio",ref:m,controls:"",autoplay:"",playsinline:"",class:"audio-player"},null,512)]))]))}},ee=F(G,[["__scopeId","data-v-c532758b"]]);export{ee as default};
